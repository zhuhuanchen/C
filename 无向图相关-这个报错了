//
//  无向图相关.c
//  C
//
//  Created by MacBook on 2019/10/18.
//  Copyright © 2019 MacBook. All rights reserved.
//

#include "无向图相关.h"
#include <sys/malloc.h>

#define MaxVertexNum 100  //图中定点数目最大值
//边表结点
typedef struct ArcNode{
    int adjvex; //该弧所指向的定点的位置
    struct ArcNode *nextArc; //指向下一条弧的指针
}ArcNode;
//顶点表结点
typedef struct VNode{
    int data; //顶点信息
    ArcNode *firstArc; //指向第一条依附该顶点的弧的指针
}VNode,AdjList[MaxVertexNum];

typedef struct {
    AdjList list; //邻接表
    int vexNum,arcNum; //图的顶点数和弧数
}ALGraph;   //以邻接表存储的图类型

void CreateALGraph(ALGraph *G){
    int i,j,k;
    int value;
    ArcNode *arc;  //定义边表结合
    printf("请输入顶点数和边数：\n");
    scanf("%d,%d",&i,&j);//读入顶点数和边数
    printf("%d,%d",i,j);
    G->vexNum = i;
    G->arcNum = j;
    
    printf("请输入顶点编号:\n");
    //建立顶点表
    for(i=0;i<G->vexNum;i++){
        scanf("%d",&value);
        G->list[i].data=value;
        G->list[i].firstArc=NULL; //边表置为空
    }
    printf("输入由两个顶点构成的边，如0 1 \n");
    
    //建立边表
    for(k=0;k<G->arcNum;k++){
        scanf("%d %d",&i,&j); //输入顶点对应序号
        arc=(ArcNode*)malloc(sizeof(ArcNode));// 为边表结点分配内存
        arc->adjvex=j;//邻接点序号为j
        arc->nextArc=G->list[i].firstArc;
        G->list[i].firstArc=arc; //将新的边表结点插入顶点Vi的边表头部
        arc=(ArcNode*)malloc(sizeof(ArcNode)); //为边表结点分配内存
        arc->adjvex=i; //邻接点序号为i
        
        arc->nextArc=G->list[j].firstArc;
        G->list[j].firstArc=arc; //将新的边表结点插入顶点Vj的边表头部
    }
}



int main()
{
    ALGraph *root;  //注意前面不能加struct，加了是错误的。
    CreateALGraph(root);
    
  
    printf("删除后的二叉树的结点值为:\n");
}


