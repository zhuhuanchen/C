
#include <stdio.h>
#include <stdlib.h>
#define GET_ARRAY_LEN(array,len) {len = (sizeof(array) / sizeof(array[0]));}


void Sift(int R[], int low,int high){
/*关键字存储设定为从1开始，为什么设置从1开始，而不是从0开始呢，仅仅是为了使左孩子的是父节点的2倍吗? */
    int i=low,j=2*i;//R[j]是R[i]的左孩子
    int temp=R[i];
    while(j<=high)
    {
        if(j<high&&R[j]<R[j+1]) //若右孩子较大，则把j指向右孩子
            ++j;                // j变为2*i+1
        if(temp<R[j]){
            R[i]=R[j];      //将R[j]调整到双亲节点的位置上
            i=j;            //修改i和j的值，以便继续向下调整
            j=2*i;
        }
        else
            break;       //调整结束
    }
    R[i]=temp;            //被调整的节点的值放入最终位置
}



void HeapSort(int R[],int n)
{
    int i,temp;
    for(i=n/2;i>=1;--i)     //建立初始堆
        Sift(R,i,n);
    for(i=n;i>=2;--i)
    {
        /*以下3句换出了根节点中的关键字，并将其放在最终位置
         */
        temp=R[1];
        R[1]=R[i];
        R[i]=temp;
        Sift(R,1,i-1);     //在减少了1个关键字的无序序列中进行调整
    }
}
    


int visit_array(int R[],int n){
    for(int i=0;i<n;++i){
        printf("R[%d]的值为：%d\n",i,R[i]);
    }
     return 0;
}


int main()
{
    int a[]={10,3,4,2,9,0,7};
    int b=7;
    visit_array(a,b);
    HeapSort(a,b);
    visit_array(a,b);
    
}
